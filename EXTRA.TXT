from datetime import datetime
# from simple_colors import *
start_time = datetime.now()
def getBatsman(player):
	for person in all_players:
		if player in person:
			return person
def getBowler(player):
	for person in all_players:
		if player in person:
			return person

def scorecard():
	team_india = ['Rohit Sharma (c)', 'KL Rahul', 'Virat Kohli', 'Suryakumar Yadav', 'Dinesh Karthik (wk)', 'Hardik Pandya', 'Ravindra Jadeja', 'Bhuvneshwar Kumar', 'Avesh Khan', 'Yuzvendra Chahal', 'Arshdeep Singh']
	team_pakistan = ['Babar Azam (c)', 'Mohammad Rizwan (wk)', 'Fakhar Zaman', 'Iftikhar Ahmed', 'Khushdil Shah', 'Asif Ali', 'Shadab Khan', 'Mohammad Nawaz', 'Naseem Shah', 'Haris Rauf', 'Shahnawaz Dahani']
	global all_players
	all_players = team_india + team_pakistan
	inns1 = {'run': 0, 'wicket': 0, 'balls': 0, 'bowling': {player : {'run': 0, 'balls': 0, 'maiden': 0, 'wicket': 0, 'nb': 0, 'wide': 0} for player in team_india},'batting': {player : {'balls': 0,'run': 0, '4s': 0, '6s': 0, 'status': ''} for player in team_pakistan}, 'extras': {'bye': 0, 'nb': 0, 'lb': 0, 'wide': 0, 'p': 0}, 'did_not_bat': team_pakistan.copy(), 'fall_of_wicket': [], 'powerplay': 0}
	inns2 = {'run': 0, 'wicket': 0, 'balls': 0, 'bowling': {player : {'run': 0, 'balls': 0, 'maiden': 0, 'wicket': 0, 'nb': 0, 'wide': 0} for player in team_pakistan},'batting': {player : {'balls': 0,'run': 0,'4s': 0, '6s': 0, 'status': ''} for player in team_india}, 'extras': {'bye': 0, 'nb': 0, 'lb': 0, 'wide': 0, 'p': 0}, 'did_not_bat': team_india.copy(), 'fall_of_wicket': [], 'powerplay': 0}
	initial=-1

	with open('india_inns2.txt', 'r') as innings2, open('pak_inns1.txt', 'r') as innings1,  open('output.txt','w') as output:
		commentary1 = innings1.readlines()
		commentary2 = innings2.readlines()
		innings=1
		for inns, lines in zip([inns1, inns2], [commentary1, commentary2]):	
			for info in [line for line in lines if line.strip()]:
				over_number=info.split(",")[0].split(" ", 1)[0].strip()
				runs = info.split(",")[1].strip()
				batter = getBatsman(info.split(",")[0].split(" ", 1)[1].split("to")[1].strip())
				if batter in inns['did_not_bat']:
					inns['did_not_bat'].remove(batter)
				bowler = getBowler(info.split(",")[0].split(" ", 1)[1].split("to")[0].strip())
				if inns['bowling'][bowler]['balls']%6==1:
					initial=inns['bowling'][bowler]['run']
				if inns['bowling'][bowler]['balls']%6==0:
					if inns['bowling'][bowler]['run']==initial:
						inns['bowling'][bowler]['maiden']+=1	
				if runs == "no run":
					inns['balls']+=1
					inns['batting'][batter]['balls']+=1
					inns['batting'][batter]['status']="not out"
					inns['bowling'][bowler]['balls']+=1
				elif runs.find('run')!= -1:
					for n in range(0,7):
						if runs == str(n)+" run":
							inns['balls'] += 1
							inns['run'] += n
							inns['bowling'][bowler]['run'] += n
							inns['bowling'][bowler]['balls'] += 1
							inns['batting'][batter]['run'] += n
							inns['batting'][batter]['balls'] += 1
							inns['batting'][batter]['status']="not out"

				elif runs == "FOUR":
					inns['balls'] += 1
					inns['run'] += 4
					inns['bowling'][bowler]['run'] += 4
					inns['bowling'][bowler]['balls'] += 1
					inns['batting'][batter]['run'] += 4
					inns['batting'][batter]['balls'] += 1
					inns['batting'][batter]['4s'] += 1
					inns['batting'][batter]['status']="not out"
				elif runs == "SIX":
					inns['balls'] += 1
					inns['run'] += 6
					inns['bowling'][bowler]['run'] += 6
					inns['bowling'][bowler]['balls'] += 1					
					inns['batting'][batter]['run'] += 6
					inns['batting'][batter]['status']="not out"
					inns['batting'][batter]['balls'] += 1
					inns['batting'][batter]['6s'] += 1
				elif runs.split(" ")[0].strip() == "out":
					inns['balls'] += 1
					inns['wicket'] += 1	
					inns['bowling'][bowler]['wicket'] += 1
					inns['bowling'][bowler]['balls'] += 1
					inns['batting'][batter]['balls'] += 1
					inns['fall_of_wicket'].append(f"{inns['run']}-{inns['wicket']} ({batter}, {over_number})")
					if runs.startswith('out Caught by'):
						inns['batting'][batter]['status'] = f"c {runs.split('!!')[0].split('out Caught by', 1)[1].strip()} b {bowler}"
					elif runs.startswith('out Lbw!!'):
						inns['batting'][batter]['status'] = f"lbw b {bowler}"
					elif runs.startswith('out Bowled!!'):
						inns['batting'][batter]['status'] = f"b {bowler}"
				elif  runs == "leg bye" or runs == "bye" :
					inns['balls'] += 1
					inns['bowling'][bowler]['balls'] += 1
					inns['batting'][batter]['balls'] += 1
					inns['batting'][batter]['status']="not out"
					run = info.split(",")[2].strip()
					if(run == 'no run'):
						continue
					elif(run == 'FOUR'):
						inns['run'] += 4
						if runs == "bye":
							inns['extras']['bye'] += 4
						else:
							inns['extras']['lb'] += 4
					elif run.find('run')!= -1: 
						for n in range(1,4):
							if(run == str(n)+' run'):
								inns['run'] += n
								if runs == "bye":
									inns['extras']['bye'] += n
								else:
									inns['extras']['lb'] += n
				elif runs == "no ball":
					inns['run']+=1
					inns['bowling'][bowler]['nb']+=1
					inns['bowling'][bowler]['run']+=1
					inns['extras']['nb'] += 1
					inns['batting'][batter]['status']="not out"
				elif runs == "wide":
					inns['run']+=1
					inns['extras']['wide'] += 1
					inns['bowling'][bowler]['run'] += 1
					inns['bowling'][bowler]['wide'] += 1
					inns['batting'][batter]['status']="not out"
				elif runs.find('wides')!=-1:
					for n in range(2,6):
						if runs == str(n)+' wides':
							inns['run'] += n
							inns['extras']['wide'] += n
							inns['bowling'][bowler]['run'] += n
							inns['bowling'][bowler]['wide'] += n
					inns['batting'][batter]['status']="not out"

				if(inns['balls']==36):
					inns['powerplay'] = inns['run']

			if innings==1:
				print(f"{'Pakistan innings' : <50}{f'''{inns['run']}-{inns['wicket']} ({over_number} Ov)''' : >95}", file=output)
				print(" ",file=output)
				innings+=1
			elif(innings==2):
				print(f"{'Indian innings' : <50}{f'''{inns['run']}-{inns['wicket']} ({over_number} Ov)''' : >95}", file=output)
				print(" ",file=output)
			print(f"{'Batter' : <50}{'' : <55}{'R' : ^8}{'B' : ^8}{'4s' : ^8}{'6s' : ^8}{'SR' : ^12}", file=output)
			print(" ",file=output)
			for batsman, data in inns['batting'].items():
				if data['status'] != '':
					print(f"{batsman : <50}{data['status'] : <55}{data['run'] : ^8}{data['balls'] : ^8}{data['4s'] : ^8}{data['6s'] : ^8}{round((data['run']/data['balls'])*100, 2) : ^12}", file=output)
			print(" ",file=output)
			print(f"{'Extras' : <50}{f'''{inns['extras']['wide']+inns['extras']['bye']+inns['extras']['nb']+inns['extras']['lb']+inns['extras']['p'] : >44}(b {inns['extras']['bye']},lb {inns['extras']['lb']},w {inns['extras']['wide']},nb {inns['extras']['nb']},p {inns['extras']['p']})''':>82}", file=output)
			print(" ",file=output)
			print(f"{'Total' : <50}{f'''{inns['run']} ({inns['wicket']} wkts, {over_number} Ov)''' : >79}", file=output)
			print(" ",file=output)
			if inns['did_not_bat']:
				print(f"{'Did not Bat' : <50}{', '.join(inns['did_not_bat']) : >44}", file=output)
			print("Fall of wicket", file=output)
			print(", ".join(inns['fall_of_wicket']), file=output)
			print(" ",file=output)
			print(f"{'Bowler' : <50}{'' : <45}{'O' : ^7}{'M' : ^7}{'R' : ^7}{'W' : ^7}{'NB' : ^7}{'WD' : ^7}{'ECO' : ^12}", file=output)
			print(" ",file=output)
			for bowler, data in inns['bowling'].items():
				if data['balls']:
					total_overs=data['balls']//6
					extra_balls=data['balls']%6
					overall_overs=str(total_overs)+'.'+str(extra_balls)
					print(f"{bowler : <50}{'' : <45}{overall_overs : ^7}{data['maiden'] : ^7}{data['run'] : ^7}{data['wicket'] : ^7}{data['nb'] : ^7}{data['wide'] : ^7}{round(data['run']/(total_overs+(extra_balls/6)),1) : ^12}", file=output)
			print(" ",file=output)
			print(f"{'Powerplays' : <50}{'Overs' : ^55}{'run' : >35}", file=output)
			print(" ",file=output)
			print(f"{'Mandatory' : <50}{'0.1-6' : ^55}{inns['powerplay']: >35}", file=output)
			print(" ",file=output)

from platform import python_version
ver = python_version()

if ver == "3.8.10":
	print("Correct Version Installed")
else:
	print("Please install 3.8.10. Instruction are present in the GitHub Repo/Webmail. Url: https://pastebin.com/nvibxmjw")

scorecard()

#This shall be the last lines of the code.
end_time = datetime.now()
print('Duration of Program Execution: {}'.format(end_time - start_time))